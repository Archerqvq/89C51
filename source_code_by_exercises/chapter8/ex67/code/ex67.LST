C51 COMPILER V9.01   EX67                                                                  08/07/2024 11:06:57 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE EX67
OBJECT MODULE PLACED IN ex67.OBJ
COMPILER INVOKED BY: C:\Keil_v5_C51\C51\BIN\C51.EXE ex67.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          // example 67:
   2          // using LCD to diaplay character "A"
   3          #include <reg51.h>
   4          #include <intrins.h> // including the declaration of _nop_()
   5          
   6          sbit RS = P2^0; // register selection bit
   7          sbit RW = P2^1; // read/write selection bit
   8          sbit E = P2^2;  // enable signal bit
   9          sbit BF = P0^7; // busy signal bit
  10          
  11          // (3j+2)*i = (3x33+2)x10=1010(us) // no idea how this formula comes -.-
  12          void delay1ms()
  13          {
  14   1          unsigned char i, j;
  15   1          for(i = 0; i < 10; i++)
  16   1          {
  17   2              for(j = 0; j < 33; j++)
  18   2              {
  19   3                  ;
  20   3              }
  21   2          }    
  22   1      }
  23          
  24          // delay for x millisecond
  25          void delay(unsigned char n)
  26          {
  27   1          unsigned char i;
  28   1          for(i = 0; i < n; i++)
  29   1          {
  30   2              delay1ms();    
  31   2          }
  32   1      }
  33          
  34          // read whether ldc module is occupied
  35          // return value : busy = 1 , available = 0
  36          unsigned char BusyTest(void)
  37          {
  38   1          bit result;
  39   1          // set RS to 0 and RW to 1 to read lcd's status
  40   1          RS = 0;  
  41   1          RW = 1;
  42   1          // enable read/write
  43   1          E = 1; 
  44   1      
  45   1          _nop_(); // do nothing for a machine cycle
  46   1          _nop_();
  47   1          _nop_();
  48   1          _nop_(); // four serial machine cycles for response of lcd
  49   1      
  50   1          result = BF; // read busy signal and set to result
  51   1      
  52   1          // ATTENTION: this should not be commnented
  53   1          // an assumption, that a falling edge of E make operation availible
  54   1          E = 0;   
  55   1      
C51 COMPILER V9.01   EX67                                                                  08/07/2024 11:06:57 PAGE 2   

  56   1          return result;
  57   1      }
  58          
  59          // write mode setting or display address to ldc
  60          void WriteInstructioin(unsigned char dictate)
  61          {
  62   1          while(BusyTest() == 1); // await if ldc is occupied
  63   1          // RS and RW are 0, write instruction operation is available
  64   1          RS = 0;
  65   1          RW = 0;
  66   1          // there is a rising edge when writing instruction
  67   1          // so first let E to be 0
  68   1          E = 0;
  69   1          _nop_();
  70   1          _nop_();
  71   1          P0 = dictate; // dictate could be address or insturction
  72   1          _nop_();
  73   1          _nop_();
  74   1          _nop_();
  75   1          _nop_();    // response for lcd
  76   1          // a rising edge for E, which means write operation is available
  77   1          E = 1;
  78   1          _nop_();
  79   1          _nop_();
  80   1          _nop_();
  81   1          _nop_();    // response for lcd
  82   1          // a falling edge for E, which makes lcd module excutes instructions automatically
  83   1          E = 0;
  84   1      }
  85          
  86          // specify the real address of character display
  87          void WriteAddress(unsigned char x)
  88          {
  89   1          WriteInstructioin(x | 0x80);
  90   1          // the way to display right position on lcd is "80H+x"(x is address code)
  91   1      }
  92          
  93          // write data(standard ASCII) to lcd
  94          void WriteData(unsigned char y)
  95          {
  96   1          while(BusyTest() == 1);
  97   1          RS = 1; // RS is 1 and RW is 0, which can write data
  98   1          RW = 0;
  99   1          // there is a rising edge when writing instruction
 100   1          // so first let E to be 0
 101   1          E = 0;  
 102   1          P0 = y; // send data through P0
 103   1          _nop_();
 104   1          _nop_();
 105   1          _nop_();
 106   1          _nop_(); // response for lcd
 107   1          // a rising edge for E, which means write operation is available
 108   1          E = 1;
 109   1          _nop_();
 110   1          _nop_();
 111   1          _nop_();
 112   1          _nop_();    // response for lcd
 113   1          // a falling edge for E, which makes lcd module excutes instructions automatically
 114   1          E = 0; 
 115   1      }
 116          
 117          // initialization for lcd's display mode
C51 COMPILER V9.01   EX67                                                                  08/07/2024 11:06:57 PAGE 3   

 118          void LcdInitiate(void)
 119          {
 120   1          delay(15); // 15ms for the first time to write insturction
 121   1          // display mode setting: 16x2 display, 5x7 dot matrix, 8-bit data interface
 122   1          WriteInstructioin(0x38);
 123   1          delay(5);
 124   1          // mode setting
 125   1          WriteInstructioin(0x38);
 126   1          delay(5);
 127   1          WriteInstructioin(0x38);
 128   1          delay(5);
 129   1          // continuously write three times to make sure it works
 130   1      
 131   1          // display mode setting: display on, cursor on, cursor blink
 132   1          // WriteInstructioin(0x0F);
 133   1          // display mode setting: display on, cursor off, cursor not blink
 134   1          WriteInstructioin(0x0C);
 135   1          delay(5);
 136   1          // display mode setting: cursor right shift, character not move
 137   1          WriteInstructioin(0x06);
 138   1          delay(5);
 139   1          // clear screen instruction to clear previous content
 140   1          WriteInstructioin(0x01);
 141   1          delay(5);
 142   1      }
 143          
 144          void main(void)
 145          {
 146   1          LcdInitiate();
 147   1          while(1)
 148   1          {
 149   2      //        WriteAddress(0x07); // specify row 1, column 8 on lcd to display
 150   2      //        WriteData('A');     // Write 'A' to lcd, automatically finish by lcd 
 151   2      //        WriteAddress(0x08);
 152   2      //        WriteData('B');
 153   2      //        WriteAddress(0x09);       
 154   2      //        WriteData('C');
 155   2      
 156   2              WriteAddress(0x02); // specify row 1, column 8 on lcd to display
 157   2              WriteData('H');     // Write 'A' to lcd, automatically finish by lcd 
 158   2              WriteAddress(0x03);
 159   2              WriteData('E');
 160   2              WriteAddress(0x04);       
 161   2              WriteData('L'); 
 162   2              WriteAddress(0x05);       
 163   2              WriteData('L');
 164   2              WriteAddress(0x06);       
 165   2              WriteData('O');
 166   2      
 167   2              WriteAddress(0x07);       
 168   2              WriteData(' ');
 169   2      
 170   2              WriteAddress(0x08);       
 171   2              WriteData('W');
 172   2              WriteAddress(0x09);       
 173   2              WriteData('O');
 174   2              WriteAddress(0x0A);       
 175   2              WriteData('R');
 176   2              WriteAddress(0x0B);       
 177   2              WriteData('L');
 178   2              WriteAddress(0x0C);       
 179   2              WriteData('D');                                           
C51 COMPILER V9.01   EX67                                                                  08/07/2024 11:06:57 PAGE 4   

 180   2              WriteAddress(0x0D);
 181   2              WriteData('!');
 182   2          }
 183   1      
 184   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    300    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
